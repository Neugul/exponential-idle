import pyautogui, keyboard
from sympy import Matrix,ones

a = 2326
b = 702
x_interval=92
y_interval=53
c=int(a-y_interval*4)
d=int(b+x_interval)
data = [
    [a, b], [a+x_interval, b+y_interval], [a+x_interval*2, b+y_interval*2], [a+x_interval*3, b+y_interval*3],
    [a-x_interval, b+y_interval], [a, b+y_interval*2], [a+x_interval, b+y_interval*3], [a+x_interval*2, b+y_interval*4], [a+x_interval*3, b+y_interval*5],
    [a-x_interval*2, b+y_interval*2], [a-x_interval, b+y_interval*3], [a, b+y_interval*4], [a+x_interval, b+y_interval*5], [a+x_interval*2, b+y_interval*6], [a+x_interval*3, b+y_interval*7],
    [a-x_interval*3, b+y_interval*3], [a-x_interval*2, b+y_interval*4], [a-x_interval, b+y_interval*5], [a, b+y_interval*6], [a+x_interval, b+y_interval*7], [a+x_interval*2, b+y_interval*8], [a+x_interval*3, b+y_interval*9],
    [a-x_interval*3, b+y_interval*5], [a-x_interval*2, b+y_interval*6], [a-x_interval, b+y_interval*7], [a, b+y_interval*8], [a+x_interval, b+y_interval*9], [a+x_interval*2, b+y_interval*10],
    [a-x_interval*3, b+y_interval*7], [a-x_interval*2, b+y_interval*8], [a-x_interval, b+y_interval*9], [a, b+y_interval*10], [a+x_interval, b+y_interval*11],
    [a-x_interval*3, b+y_interval*9], [a-x_interval*2, b+y_interval*10], [a-x_interval, b+y_interval*11], [a, b+y_interval*12]]

def hard(B: Matrix):
    A =3*Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 7/3, -7/3, 10/3, -10/3, 10/3, 5, -4, 2/3, 5/3, -5, 5, -3, -1/3, -4/3, 2, 2/3, -7/3, -1, -5/3, 16/3, -7/3, -4/3, 13/3, -5/3, -1/3, 2/3, -3, -1/3, 2/3, -4, 11/3, 8/3, -3], [-1, 0, 0, 0, -7/3, 10/3, -10/3, 10/3, -10/3, -6, 5, -5/3, -5/3, 5, -5, 2, 4/3, 1/3, -2, 1/3, 4/3, 2, 8/3, -16/3, 7/3, 7/3, -16/3, 5/3, -2/3, -2/3, 3, -2/3, 1/3, 4, -8/3, -11/3, 4], [0, -1, -1, 0, 10/3, -10/3, 13/3, -10/3, 10/3, 6, -6, 5/3, 5/3, -6, 6, -2, -4/3, -1/3, 2, -1/3, -4/3, -2, -8/3, 19/3, -7/3, -7/3, 19/3, -8/3, -1/3, 2/3, -4, 2/3, -1/3, -4, 11/3, 11/3, -4], [0, 0, 0, -1, -10/3, 10/3, -10/3, 10/3, -7/3, -5, 5, -5/3, -5/3, 5, -6, 2, 4/3, 1/3, -2, 1/3, 4/3, 2, 5/3, -16/3, 7/3, 7/3, -16/3, 8/3, 1/3, -2/3, 3, -2/3, -2/3, 4, -11/3, -8/3, 4], [0, 0, -1, 0, 10/3, -10/3, 10/3, -7/3, 7/3, 5, -5, 5/3, 2/3, -4, 5, -1, -7/3, 2/3, 2, -4/3, -1/3, -3, -5/3, 13/3, -4/3, -7/3, 16/3, -5/3, 2/3, -1/3, -3, 2/3, -1/3, -3, 8/3, 11/3, -4], [1, 0, -1, 0, 5, -6, 6, -5, 5, 9, -8, 3, 2, -8, 8, -2, -3, 0, 3, -1, -1, -4, -4, 8, -3, -4, 9, -3, 1, 1, -5, 1, -1, -6, 4, 6, -6], [-1, 1, 1, 0, -4, 5, -6, 5, -5, -8, 7, -2, -2, 8, -8, 3, 2, 1, -3, 0, 2, 3, 3, -8, 3, 3, -8, 3, 0, -1, 5, 0, 0, 6, -5, -5, 5], [1, 0, 0, 0, 2/3, -5/3, 5/3, -5/3, 5/3, 3, -2, 4/3, 1/3, -2, 2, 0, -5/3, 1/3, 1, -2/3, 1/3, -2, -4/3, 5/3, -2/3, -5/3, 8/3, -1/3, 4/3, 1/3, -1, 1/3, -2/3, -2, 1/3, 7/3, -2], [0, 0, 0, 1, 5/3, -5/3, 5/3, -5/3, 2/3, 2, -2, 1/3, 4/3, -2, 3, -2, 1/3, -2/3, 1, 1/3, -5/3, 0, -1/3, 8/3, -5/3, -2/3, 5/3, -4/3, -2/3, 1/3, -1, 1/3, 4/3, -2, 7/3, 1/3, -2], [0, 1, 1, -1, -5, 5, -6, 5, -4, -8, 8, -2, -2, 7, -8, 3, 2, 0, -3, 1, 2, 3, 3, -8, 3, 3, -8, 3, 0, 0, 5, -1, 0, 5, -5, -5, 6], [0, -1, 0, 1, 5, -5, 6, -6, 5, 8, -8, 2, 3, -8, 9, -4, -1, -1, 3, 0, -3, -2, -3, 9, -4, -3, 8, -4, -1, 1, -5, 1, 1, -6, 6, 4, -6], [1, 0, 0, -1, -3, 2, -2, 2, -1, -2, 3, 0, -2, 3, -4, 2, 0, 0, -1, 0, 2, 0, 1, -4, 2, 1, -3, 2, 1, 0, 2, -1, -1, 2, -3, -1, 3], [-1, 0, 0, 1, -1/3, 4/3, -4/3, 4/3, -7/3, -3, 2, -5/3, 1/3, 2, -1, 0, 4/3, 1/3, -1, 1/3, -2/3, 2, 5/3, -4/3, 1/3, 4/3, -7/3, -1/3, -5/3, -2/3, 1, 1/3, 4/3, 2, 1/3, -8/3, 1], [1, 0, 0, -1, -4/3, 1/3, -1/3, 1/3, 2/3, 0, 1, 1/3, -2/3, 0, -1, 0, 1/3, -2/3, 0, 1/3, 1/3, 0, -1/3, -1/3, 1/3, 1/3, -1/3, 2/3, 1/3, 1/3, 0, -2/3, -2/3, 0, -2/3, 1/3, 1], [0, 0, 0, 0, 2, -2, 2, -2, 2, 3, -3, 1, 1, -3, 3, -1, -1, 0, 1, 0, -1, -1, -1, 3, -1, -1, 3, -1, 0, 0, -2, 0, 0, -2, 2, 2, -2], [-1, 0, 0, 1, 2/3, 1/3, -1/3, 1/3, -4/3, -1, 0, -2/3, 1/3, 1, 0, 0, 1/3, 1/3, 0, -2/3, 1/3, 0, 2/3, -1/3, 1/3, 1/3, -1/3, -1/3, -2/3, -2/3, 0, 1/3, 1/3, 1, 1/3, -2/3, 0], [1, 0, 0, -1, -7/3, 4/3, -4/3, 4/3, -1/3, -1, 2, 1/3, -5/3, 2, -3, 2, -2/3, 1/3, -1, 1/3, 4/3, 0, -1/3, -7/3, 4/3, 1/3, -4/3, 5/3, 4/3, 1/3, 1, -2/3, -5/3, 1, -8/3, 1/3, 2], [-1, 0, 0, 1, -1, 2, -2, 2, -3, -4, 3, -2, 0, 3, -2, 0, 2, 0, -1, 0, 0, 2, 2, -3, 1, 2, -4, 1, -1, -1, 2, 0, 1, 3, -1, -3, 2], [-1, 0, 1, 0, -5/3, 8/3, -8/3, 5/3, -5/3, -4, 3, -4/3, -1/3, 3, -3, 1, 5/3, -1/3, -1, 2/3, -1/3, 2, 4/3, -8/3, 2/3, 5/3, -11/3, 4/3, -1/3, -1/3, 2, -1/3, 2/3, 2, -4/3, -7/3, 2], [0, -1, -1, 1, 16/3, -16/3, 19/3, -16/3, 13/3, 8, -8, 5/3, 8/3, -8, 9, -4, -4/3, -1/3, 3, -1/3, -7/3, -3, -8/3, 25/3, -10/3, -10/3, 25/3, -11/3, -1/3, 2/3, -5, 2/3, 2/3, -6, 17/3, 14/3, -6], [0, 0, 0, -1, -7/3, 7/3, -7/3, 7/3, -4/3, -3, 3, -2/3, -5/3, 3, -4, 2, 1/3, 1/3, -1, 1/3, 4/3, 1, 2/3, -10/3, 4/3, 4/3, -10/3, 5/3, 1/3, 1/3, 2, -2/3, -2/3, 2, -8/3, -5/3, 3], [-1, 0, 0, 0, -4/3, 7/3, -7/3, 7/3, -7/3, -4, 3, -5/3, -2/3, 3, -3, 1, 4/3, 1/3, -1, 1/3, 1/3, 2, 5/3, -10/3, 4/3, 4/3, -10/3, 2/3, -2/3, -2/3, 2, 1/3, 1/3, 3, -5/3, -8/3, 2], [1, -1, -1, 0, 13/3, -16/3, 19/3, -16/3, 16/3, 9, -8, 8/3, 5/3, -8, 8, -3, -7/3, -1/3, 3, -1/3, -4/3, -4, -11/3, 25/3, -10/3, -10/3, 25/3, -8/3, 2/3, 2/3, -5, 2/3, -1/3, -6, 14/3, 17/3, -6], [0, 1, 0, -1, -5/3, 5/3, -8/3, 8/3, -5/3, -3, 3, -1/3, -4/3, 3, -4, 2, -1/3, 2/3, -1, -1/3, 5/3, 1, 4/3, -11/3, 5/3, 2/3, -8/3, 4/3, 2/3, -1/3, 2, -1/3, -1/3, 2, -7/3, -4/3, 2], [1, 1, 0, -1, -1/3, -2/3, -1/3, 1/3, 2/3, 1, 0, 4/3, -2/3, 0, -1, 1, -5/3, 1/3, 0, -2/3, 4/3, -1, -1/3, -1/3, 1/3, -2/3, 2/3, 2/3, 4/3, 1/3, 0, 1/3, -5/3, 0, -5/3, 4/3, 0], [0, 0, 0, 1, 2/3, -2/3, 2/3, -2/3, -1/3, 1, -1, 1/3, 1/3, 0, 1, 0, -2/3, 1/3, 0, -2/3, 1/3, -1, -1/3, 2/3, 1/3, -2/3, 2/3, -1/3, 1/3, -2/3, 0, 1/3, 1/3, 0, 1/3, 1/3, -1], [0, 1, 1, 0, -3, 3, -4, 3, -3, -5, 5, -1, -1, 5, -5, 2, 1, 0, -2, 0, 1, 2, 2, -5, 2, 2, -5, 2, 0, 0, 3, 0, 0, 3, -3, -3, 3], [1, 0, 0, 0, -1/3, -2/3, 2/3, -2/3, 2/3, 1, 0, 1/3, 1/3, -1, 1, -1, 1/3, -2/3, 0, 1/3, -2/3, 0, -1/3, 2/3, -2/3, 1/3, 2/3, -1/3, 1/3, 1/3, 0, -2/3, 1/3, -1, 1/3, 1/3, 0], [-1, 0, 1, 1, 2/3, 1/3, -1/3, -2/3, -1/3, -1, 0, -2/3, 4/3, 0, 1, -1, 4/3, -2/3, 0, 1/3, -5/3, 1, 2/3, 2/3, -2/3, 1/3, -1/3, -1/3, -5/3, 1/3, 0, 1/3, 4/3, 0, 4/3, -5/3, 0], [0, 0, 0, -1, -4, 4, -4, 4, -3, -6, 6, -2, -2, 5, -6, 2, 2, 0, -2, 1, 1, 3, 2, -6, 2, 3, -6, 2, 0, 0, 3, -1, 0, 4, -3, -4, 5], [-1, -1, 0, 1, 11/3, -8/3, 11/3, -11/3, 8/3, 4, -5, 1/3, 7/3, -5, 6, -3, 1/3, -2/3, 2, 1/3, -8/3, -1, -4/3, 17/3, -8/3, -5/3, 14/3, -7/3, -5/3, 1/3, -3, 1/3, 4/3, -3, 13/3, 7/3, -4], [1, 0, -1, -1, 8/3, -11/3, 11/3, -8/3, 11/3, 6, -5, 7/3, 1/3, -5, 4, -1, -8/3, 1/3, 2, -2/3, 1/3, -3, -7/3, 14/3, -5/3, -8/3, 17/3, -4/3, 4/3, 1/3, -3, 1/3, -5/3, -4, 7/3, 13/3, -3], [-1, 0, 0, 0, -3, 4, -4, 4, -4, -6, 5, -2, -2, 6, -6, 3, 1, 1, -2, 0, 2, 2, 2, -6, 3, 2, -6, 2, 0, -1, 3, 0, 0, 5, -4, -3, 4]])
    A=A.applyfunc(int)
#    print(A)
    B = B.copy()
    for i in range(4):
        B[i] = 0
    X = A * (-B)
    return X % 2
while True:
    B_2 = ones(37, 1)*6
    n = 0
    screenshot = pyautogui.screenshot()
    for (x, y) in data:
        pixel_color = screenshot.getpixel((x, y))
        if pixel_color == (85, 85, 85):
            B_2[n] = 1
        elif pixel_color == (17, 17, 17):
            B_2[n] = 0
        n = n + 1
#    print(B_2)
    if B_2[2]==6:
        print('color error')
        break
    sol = hard(B_2)

    for i in range(37):
        if keyboard.is_pressed('esc'):
            break
        if sol[i] >= 1:
            x, y = data[i]
            pyautogui.click(x, y, 1, 0, 'right')
    pyautogui.click(a - 166, b + 912, 1, 0, 'right')

    if keyboard.is_pressed('esc'):
        break
